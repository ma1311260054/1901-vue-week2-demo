
vue vue-router

express

1、需求分析 （psd,说明书,产品原型）
   1.1 根据用户的编号展示这个用户的购物车的信息
   1.2 统计所有选中的商品的总价格
   1.3 单店铺结算
   1.4 反选或者全选，总价格需要重新计算
   1.5 商品的件数可以修改，总体格重新计算

2、概要设计 （分析的结构，基本设计）
   业务设计：
   1.1 ajax api - > cartInfo {}
   1.2 总价格 = all ( product.price * product.num)
   1.3 单店铺结算 = shop all( product.price * product.num)
   1.4 data数据绑定改变checkbox style :checked { }
   1.5 add,minus (shopid productid) - > num

3、详细设计 (算法)

   架构设计 ：选择框架   vue = mvvm + component
            后台的模拟 mongodb + express + node

   组件设计 ： props


   根据页面建立数据模型：
   1.数据结构分类
     1.1 cartInfo Object {
         totalPrice:float 总价格
         checked: boolean
       }
     1.2 shops [shop,shop] array
     1.3 shop object {
         checked:boolean,
         degree:number,
         shopName:string,
         totalPrice:number,
         products:object
       }
     1.4 products [product,product] array
     1.5 product object {
         checked:boolean,
         title:string,
         price:float,
         num:int,
         attrs:{ weight:string,color:string,version:string }
      }

   2.找出数据结构的关系
     cartInfo: {
         user:{}
         shops:[
            shop:{
               products:[
                  product
               ]
            }
         ]
     }
   模拟的接口数据

4、编写代码

 组件：
 智能组件 pages data lifecircle
 木偶组件 components props

 one-way dataflow  page

 组件的规则
 1. named component
 pascal / cemaral case  kebab-case

 2.项目名称+页面名称+功能名称
   jd + carts + header
   v-on


   jh-cart   购物车

   jh-cart-header cartHeader

   jh-cart-footer cartFooter

   jh-cart-shop-list cartShopList

   jh-cart-shop cartShop

   jh-cart-shop-product-list cartShopProductList

   jh-cart-shop-product cartShopProduct

 动态的组件设计
   1.组件的输入和输出接口
   props 设计
   emit  设计

   data: 输入数据

   2.组件的状态管理
   3.组件的生命周期管理
